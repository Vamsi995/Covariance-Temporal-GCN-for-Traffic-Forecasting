# -*- coding: utf-8 -*-
"""cVTGCN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Vamsi995/Covariance-Temporal-GCN-for-Traffic-Forecasting/blob/main/cVTGCN.ipynb
"""

import numpy as np
import pandas as pd
import pickle as pkl
import numpy as np
import pandas as pd
import torch
import argparse
from torch.utils.data.dataloader import DataLoader
import scipy.sparse as sp
from torch.nn.functional import normalize
from math import nan
import torch.nn as nn
import torch.nn.functional as F
import argparse
import torch.optim as optim
from tqdm import tqdm
from model.tgcn import TGCN, SupervisedForecastTask
from matplotlib import pyplot as plt
from dataloader import SpatioTemporalCSVDataModule




def load_sz_data():
    sz_adj = pd.read_csv(r'/content/sz_adj.csv',header=None)
    adj = np.asarray(sz_adj)
    sz_tf = pd.read_csv(r'/content/sz_speed.csv')
    return sz_tf, adj

def load_los_data():
    los_adj = pd.read_csv(r'/content/los_adj.csv',header=None)
    adj = np.asarray(los_adj)
    los_tf = pd.read_csv(r'/content/los_speed.csv')
    return los_tf, adj

# 15min Validating: 100%|██████████| 1/1 [00:01<00:00,  1.70s/it]Validation Loss: 27.7364, RMSE: 5.2665, MAE: 3.2937, R2: 0.8559, Explained Variance: 0.8567 Accuracy: 0.9103
# 30min Validating: 100%|██████████| 1/1 [00:03<00:00,  3.55s/it]Validation Loss: 39.8364, RMSE: 6.3116, MAE: 3.8155, R2: 0.7937, Explained Variance: 0.7937 Accuracy: 0.8925

# 45min Validating: 100%|██████████| 1/1 [00:01<00:00,  1.64s/it]Validation Loss: 51.5813, RMSE: 7.1820, MAE: 4.3116, R2: 0.7338, Explained Variance: 0.7338 Accuracy: 0.8777
# 60min Validating: 100%|██████████| 1/1 [00:01<00:00,  1.62s/it]Validation Loss: 62.4549, RMSE: 7.9028, MAE: 4.7294, R2: 0.6787, Explained Variance: 0.6788 Accuracy: 0.8653

# 15min Validating: 100%|██████████| 1/1 [00:01<00:00,  1.79s/it]Validation Loss: 17.9162, RMSE: 4.2328, MAE: 2.9625, R2: 0.8358, Explained Variance: 0.8360 Accuracy: 0.7050
# 30min Validating: 100%|██████████| 1/1 [00:01<00:00,  1.78s/it]Validation Loss: 18.5834, RMSE: 4.3108, MAE: 3.0719, R2: 0.8298, Explained Variance: 0.8300 Accuracy: 0.6996

# SZ - taxi
# 24 S 30min Validating: 100%|██████████| 1/1 [00:03<00:00,  3.61s/it]Validation Loss: 18.8457, RMSE: 4.3412, MAE: 3.0485, R2: 0.8273, Explained Variance: 0.8280 Accuracy: 0.6971
# 36 S 30min Validating: 100%|██████████| 1/1 [00:14<00:00, 14.02s/it]Validation Loss: 18.7651, RMSE: 4.3319, MAE: 3.0749, R2: 0.8283, Explained Variance: 0.8294 Accuracy: 0.6980

# 48 S 30min Validating: 100%|██████████| 1/1 [00:06<00:00,  6.92s/it]Validation Loss: 18.6807, RMSE: 4.3221, MAE: 3.0549, R2: 0.8286, Explained Variance: 0.8287 Accuracy: 0.6985



if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', choices=["los_loop", "sz_taxi"])
    parser.add_argument('--hidden_dim', type=int, default=32)
    parser.add_argument('--epochs', type=int, default=100)

    args = parser.parse_args()

    if args.config == "los_loop":
        speed, adj = load_los_data()
        speed_path = "/content/los_speed.csv"
        adj_path = "/content/los_adj.csv"
    else:
        speed, adj = load_sz_data()
        speed_path = "/content/sz_speed.csv"
        adj_path = "/content/sz_adj.csv"

    data_module = SpatioTemporalCSVDataModule(speed_path, adj_path)
    hidden_dim = args.hidden_dim
    epochs = args.epochs
    model = TGCN(data_module.adj, hidden_dim)
    trainer = SupervisedForecastTask(model, feat_max_val=data_module.feat_max_val)
    trainer.train(data_module.train_dataloader(), data_module.val_dataloader(), epochs)

    torch.save(trainer.model.state_dict(), "/content/cVTGCN.pkl")

